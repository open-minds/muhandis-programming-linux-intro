<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>reveal.js - The HTML Presentation Framework</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/black.css" id="theme">

		<!-- Code syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
				
				
				<section>

					<h3>First step in programation</h3>
					<p>
						<small>Created by <a href="#">Team Open Mind - Univ Oran 1</a> / <a href="#">Chawki BENCHEHIDA</a></small>
					</p>
				</section>

				<section>
					<h2>Partie I : Programmer</h2>
					<p class="fragment">ça consiste à quoi ?</p>
				</section>

				<section>
					<h2>Ordinateur : une machine bête et disiplinée</h2>
					<p>il applique une série d'instruction écrit par le programmeur pour arriver à un résultat désiré</p>
					<p>cet enchainement d'instruction est appelé : Algorithme</p>
					<pre><code data-trim contenteditable>
instruction 1 : faire ça
instruction 2 : faire ceci
instruction 3 : si condition alors action sinon action_2

					</code></pre>
					On peut même lui ordonner de ce tuer : instruction de la mort (linux)
					<pre><code data-trim contenteditable>
# rm -rf /*

					</code></pre>
				</section>

				<section>
					<h2>Intragire avec le monde </h2>
					<p>Hello World!</p>
					<pre><code data-trim contenteditable>
afficher("Bonjours le monde")

					</code></pre>
					<p>le but d'un algorithme est d'appliquer une série d'instruction, quelque fois sur des données entrées par l'utilisateur</p>

					<pre><code data-trim contenteditable>
lire("une donnée a, une données b")
afficher("une addition: "a+b)
afficher("une multiplication: "a*b)

					</code></pre>

				</section>

				<section>
					<h2>Manipuler des données</h2>
					<p>avec l'algorithme on peut manipuler des données grace à des variables qui contiennent nos données</p>

					<pre><code data-trim contenteditable>
var1 = lire("une donnée numérique entière")
var2 = lire("une données réelle")
var3 = lire("une chaine de caractère")

					</code></pre>

					Faire tout ce qu'on a envie

					<pre><code data-trim contenteditable>
effacer(var3)
var1 = var1 + 1
var4 = sqrt(var2)

					</code></pre>
				</section>

				<section>
					<h2>Imposer nos règles</h2>
					<p>c'est nos les patrons, on veut imposer des règles de conduite sur les variables</p>
					<pre><code data-trim contenteditable>
si var1 > 0
alors executer une action
sinon ne rien faire

					</code></pre>

				</section>

				<section>
					<h2>Répéter</h2>
					<p>un ordinateur ne se lasse jamais de répéter une instruction. Jamais !</p>

					<pre><code data-trim contenteditable>
répéter tant que var1 < 40
	var1 = var1 * 2

					</code></pre>

					<pre><code data-trim contenteditable>
répéter 
	var1 = var1 * 2
jusqu'à var1 >= 40
					</code></pre>
				</section>

				<section>
					<h2>La réutilisation des bouts de code (une fonction)</h2>
					<p>on se fatique quand on veut répéter les mêmes instruction dans un code</p>
					<p>Solution : structurer le programme en des fonctions</p>

					<pre><code data-trim contenteditable>
inverser(chaine)
	var1 = taille(chaine)
	var2 = 1
	répéter tant que var1 != var2
		tmp = chaine[var2]
		chaine[var2] = chaine[var1]
		chaine[var1] = tmp

		var1 = var1 - 1
		var2 = var2 + 1
					</code></pre>
				</section>

				<section>
					<h2>Partie II : Avec quoi</h2>
					<p class="fragment">quels sont les outils utilisés de nos jours</p>
				</section>

				<section>
					<h2>Des centaines de langages, comment choisir ?</h2>
					<p>Un peu de théorie: le Paradigme des langages ou leurs classification</p>
				</section>

				<section>
					
					<table>
						<thead>
							<tr>
								<th>Paragigme</th>
								<th>Langage</th>
								<th>Définition</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>impérative</td>
								<td>C/C++, PASCAL, Python, Java, PHP</td>
								<td>séquencement d'instruction d'affication, condition, répétition</td>
							<tr>
							<tr>
								<td>orienté objet</td>
								<td>C++, Python, Java, C#, Ruby</td>
								<td>Tout est objet. la notion de classe, héritage, polymorphisme</td>
							<tr>
							<tr>
								<td>déclarative</td>
								<td>HTML, LaTeX, Scala, Haskell, Prolog</td>
								<td>déclarer ce qui doit être fait.</td>
							<tr>
						</tbody>
					</table>

					
				</section>

				<section>
					<h3>Application Desktop (Windows, Mac, Linux)</h3>

					<ul>
						<li>Java : Swing, FX</li>
						<li>C++ : QT</li>
						<li>Python : PyQT, Tkinter</li>
					</ul>
				</section>

				<section>
					<h3>Le WEB</h3>

					<p>Le Front-End</p>
					<p>Métier orientée design et UX (User eXperience)</p>
					<ul>
						<li>HTML : Structuration de la page</li>
						<li>CSS : Feuille de style</li>
						<li>JavaScript : Evenement et interaction</li>
					</ul>

					<small>AJAX : Application temps réel</small>
					<small>Framework JS : AnglarJS(Google), ReactJS(Facebook), JQuery</small>
				</section>

				<section>
					<h3>Le WEB</h3>

					<p>Le Back-End</p>
					<p>Métier orientée conception de base de données, Fonctionnalités</p>
					<ul>
						<li>PHP : le plus utilisé. lèger, efficace</li>
						<li>Java J2EE : puissant, Application multi-couche</li>
						<li>Django : Framework Python, très utilsé par les Start-Up</li>
						<li>Ruby On rail : Framework Ruby, très rapide grace au langage Ruby</li>
						<li>Node.JS : le Framework JavaScript pour les Back-End</li>
						<li>ASP.NET : en C#, pour les développeurs Microsoft</li>
					</ul>

				</section>

				<!-- Mettre une photo -->

				<section>
					<h3>Les Applications Mobiles</h3>
					<p>Deux Approches</p>
					<ul>
						<li>Developpement natif : Java/XML(Android), Objective-C(IOS)</li>
						<li>Developpement Hybrid : HTML/CSS/JS. Outils: PHONEGAP, IONIC, CORDOVA</li>
					</ul>

					<small>Création de WebView Contenant l'équivalent d'un siteweb responsiv</small>

				</section>

				<!-- Mettre des photos-->

				<section>
					<h3>Les Applications Mobiles</h3>
					<p>Deux Approches</p>
					<ul>
						<li>Developpement natif : Java/XML(Android), Objective-C(IOS)</li>
						<li>Developpement Hybrid : HTML/CSS/JS. Outils: PHONEGAP, IONIC, CORDOVA</li>
					</ul>

					<small>Création de WebView Contenant l'équivalent d'un siteweb responsiv</small>

				</section>

			</div>

		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>

			// Full list of configuration options available at:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				transition: 'slide', // none/fade/slide/convex/concave/zoom

				// Optional reveal.js plugins
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true },
					{ src: 'plugin/notes/notes.js', async: true }
				]
			});

		</script>

	</body>
</html>
